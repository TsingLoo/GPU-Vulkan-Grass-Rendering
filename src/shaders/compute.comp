#version 450
#extension GL_ARB_separate_shader_objects : enable

#define ENABLE_ORIENTATION_CULL 1
#define ENABLE_DISTANCE_CULL 1
#define ENABLE_VIEWFRUSTUM_CULL 1

#define WORKGROUP_SIZE 32
layout(local_size_x = WORKGROUP_SIZE, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0) uniform CameraBufferObject {
    mat4 view;
    mat4 proj;
} camera;

layout(set = 1, binding = 0) uniform Time {
    float deltaTime;
    float totalTime;
};

struct Blade {
    vec4 v0;
    vec4 v1;
    vec4 v2;
    vec4 up;
};

layout(set = 2, binding = 0) buffer Blades {
    Blade blades[];
};

layout(set = 2, binding = 1) buffer CulledBlades {
    Blade culledBlades[];
};

struct DrawIndirectCommand {
     uint vertexCount;
     uint instanceCount;
     uint firstVertex;
     uint firstInstance;
};

layout(set = 2, binding = 2) buffer NumBlades {
    DrawIndirectCommand numBlades;
};


// TODO: Add bindings to:
// 1. Store the input blades
// 2. Write out the culled blades
// 3. Write the total number of blades remaining

// The project is using vkCmdDrawIndirect to use a buffer as the arguments for a draw call
// This is sort of an advanced feature so we've showed you what this buffer should look like
//
// layout(set = ???, binding = ???) buffer NumBlades {
// 	  uint vertexCount;   // Write the number of blades remaining here
// 	  uint instanceCount; // = 1
// 	  uint firstVertex;   // = 0
// 	  uint firstInstance; // = 0
// } numBlades;

bool inBounds(float value, float bounds) {
    return (value >= -bounds) && (value <= bounds);
}

void main() {
	// Reset the number of blades to 0
    uint index = gl_GlobalInvocationID.x;

	// Reset the number of blades to 0
	if (gl_GlobalInvocationID.x == 0) {
		numBlades.vertexCount = 0;
        numBlades.instanceCount = 1;
        numBlades.firstVertex = 0;
        numBlades.firstInstance = 0;
	}
	barrier();

    // TODO: Apply forces on every blade and update the vertices in the buffer

    if (index >= blades.length()) {
        return;
    }

    Blade blade = blades[index];

    float orientation = blade.v0.w;
    float height = blade.v1.w;
    float width = blade.v2.w;
    float stiffness = blade.up.w;

    vec3 iv2 = blade.v0.xyz + blade.up.xyz * height;
    vec3 recovery = (iv2 - blade.v2.xyz) * stiffness;

    vec3 forward = vec3(cos(orientation), 0.0, sin(orientation));
    vec3 gE = vec3(0.0, -9.8, 0.0) * 0.5;
    vec3 gF = 0.25 * length(gE) * forward;
    vec3 gravity = gE + gF;

    vec3 windDir = vec3(sin(totalTime + blade.v0.x * 0.1) * 0.5 + 0.5, 0.0, cos(totalTime + blade.v0.z * 0.1) * 0.5);
    float windStrength = 2.0;
    vec3 wind = windDir * windStrength;

    vec3 totalForce = (recovery + gravity + wind);

    vec3 v2_new = blade.v2.xyz + totalForce * deltaTime;

    v2_new.y = max(v2_new.y, blade.v0.y + 0.01);

    vec3 v1_new = (blade.v0.xyz + v2_new) * 0.5 + blade.up.xyz * (height * 0.5);

    blades[index].v1.xyz = v1_new;
    blades[index].v2.xyz = v2_new;

    barrier();

    Blade updatedBlade = blades[index]; 
    bool culled = false;

    mat4 invView = inverse(camera.view);
    vec3 camPos = invView[3].xyz;
    vec3 viewVec = normalize(camPos - updatedBlade.v0.xyz);

    vec3 bladeForward = vec3(cos(updatedBlade.v0.w), 0.0, sin(updatedBlade.v0.w));
    #if ENABLE_ORIENTATION_CULL
    if (abs(dot(viewVec, bladeForward)) < 0.2) {
        culled = true;
    }
    #endif

    vec4 p0_clip = camera.proj * camera.view * vec4(updatedBlade.v0.xyz, 1.0);
    vec4 p2_clip = camera.proj * camera.view * vec4(updatedBlade.v2.xyz, 1.0);
    vec3 m_world = 0.25 * updatedBlade.v0.xyz + 0.5 * updatedBlade.v1.xyz + 0.25 * updatedBlade.v2.xyz;
    vec4 m_clip = camera.proj * camera.view * vec4(m_world, 1.0);

    bool p0_out = !inBounds(p0_clip.x, p0_clip.w) || !inBounds(p0_clip.y, p0_clip.w) || !inBounds(p0_clip.z, p0_clip.w);
    bool p2_out = !inBounds(p2_clip.x, p2_clip.w) || !inBounds(p2_clip.y, p2_clip.w) || !inBounds(p2_clip.z, p2_clip.w);
    bool m_out = !inBounds(m_clip.x, m_clip.w) || !inBounds(m_clip.y, m_clip.w) || !inBounds(m_clip.z, m_clip.w);

    #if ENABLE_VIEWFRUSTUM_CULL
    if (p0_out && p2_out && m_out) {
        culled = true;
    }
    #endif

    float dist = distance(camPos, updatedBlade.v0.xyz);
    float maxDist = 80.0;
    float startFadeDist = 60.0;
    #if ENABLE_DISTANCE_CULL
        if (dist > maxDist) {
            culled = true;
        } else if (dist > startFadeDist) {
            float hash = fract(sin(float(index) * 12.9898) * 43758.5453);
            float fadeAmount = (dist - startFadeDist) / (maxDist - startFadeDist);
            if (hash < fadeAmount) {
                culled = true;
            }
        }
    #endif

    if (!culled) {
		uint outIndex = atomicAdd(numBlades.vertexCount, 1);

		culledBlades[outIndex] = updatedBlade;
	}

	// TODO: Cull blades that are too far away or not in the camera frustum and write them
	// to the culled blades buffer
	// Note: to do this, you will need to use an atomic operation to read and update numBlades.vertexCount
	// You want to write the visible blades to the buffer without write conflicts between threads
}
